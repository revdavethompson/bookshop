"use strict";(self.webpackChunkbp_docs=self.webpackChunkbp_docs||[]).push([[874],{297:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"bookpub-extras/pandoc-markdown","title":"Pandoc Markdown Tutorial","description":"This tutorial demonstrates how Pandoc converts extended Markdown into HTML. We\u2019ll cover:","source":"@site/docs/bookpub-extras/pandoc-markdown.md","sourceDirName":"bookpub-extras","slug":"/bookpub-extras/pandoc-markdown","permalink":"/bookpub/docs/bookpub-extras/pandoc-markdown","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"bookpub - Extras","permalink":"/bookpub/docs/category/bookpub---extras"}}');var s=i(4848),t=i(8453);const r={},l="Pandoc Markdown Tutorial",c={},d=[{value:"1. General Markdown",id:"1-general-markdown",level:2},{value:"2. Fenced Code Blocks and Attributes",id:"2-fenced-code-blocks-and-attributes",level:2},{value:"3. Link Attributes",id:"3-link-attributes",level:2},{value:"4. Bracketed Spans",id:"4-bracketed-spans",level:2},{value:"5. Generic Attributes",id:"5-generic-attributes",level:2},{value:"6. Raw Attributes",id:"6-raw-attributes",level:2},{value:"7. Designating Specific HTML Tags",id:"7-designating-specific-html-tags",level:2},{value:"Section",id:"section",level:3},{value:"Article",id:"article",level:3},{value:"Footer",id:"footer",level:3},{value:"Div",id:"div",level:3},{value:"Span",id:"span",level:3},{value:"Pre and Code",id:"pre-and-code",level:3},{value:"Line Break (br)",id:"line-break-br",level:3},{value:"Horizontal Rule (hr)",id:"horizontal-rule-hr",level:3}];function o(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"pandoc-markdown-tutorial",children:"Pandoc Markdown Tutorial"})}),"\n",(0,s.jsx)(n.p,{children:"This tutorial demonstrates how Pandoc converts extended Markdown into HTML. We\u2019ll cover:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"General Markdown"}),"\n",(0,s.jsx)(n.li,{children:"Fenced code blocks and attributes"}),"\n",(0,s.jsx)(n.li,{children:"Link attributes"}),"\n",(0,s.jsx)(n.li,{children:"Bracketed spans"}),"\n",(0,s.jsx)(n.li,{children:"Generic attributes"}),"\n",(0,s.jsx)(n.li,{children:"Raw attributes"}),"\n",(0,s.jsx)(n.li,{children:"How to designate specific HTML tags: section, article, footer, div, span, pre, code, br, hr"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"1-general-markdown",children:"1. General Markdown"}),"\n",(0,s.jsx)(n.p,{children:"Basic Markdown elements work as you\u2019d expect. For example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markdown",children:"# Sample Heading\n\nThis is a paragraph with **bold text** and *italic text*.\n\n- List item 1\n- List item 2\n"})}),"\n",(0,s.jsx)(n.p,{children:"Pandoc converts that into:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:"<h1>Sample Heading</h1>\n<p>This is a paragraph with <strong>bold text</strong> and <em>italic text</em>.</p>\n<ul>\n  <li>List item 1</li>\n  <li>List item 2</li>\n</ul>\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"2-fenced-code-blocks-and-attributes",children:"2. Fenced Code Blocks and Attributes"}),"\n",(0,s.jsx)(n.p,{children:"Pandoc supports fenced code blocks with extra attributes to set language, id, classes, etc."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markdown",children:'    ```python {#code-example .highlight}\n    def greet():\n        print("Hello, world!")\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'\nThis tells Pandoc to wrap the code in a `<pre>` and `<code>` block, add an `id` of `code-example`, a class `highlight`, and also a language class for syntax highlighting:\n\n```html\n<pre id="code-example" class="highlight">\n  <code class="language-python">def greet():\n    print("Hello, world!")\n  </code>\n</pre>\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"3-link-attributes",children:"3. Link Attributes"}),"\n",(0,s.jsx)(n.p,{children:"You can attach extra attributes to links. Check out this example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markdown",children:'[Visit Google](https://google.com){: target="_blank" class="external-link"}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Pandoc converts it into:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<p><a href="https://google.com" target="_blank" class="external-link">Visit Google</a></p>\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"4-bracketed-spans",children:"4. Bracketed Spans"}),"\n",(0,s.jsx)(n.p,{children:"Bracketed spans let you add attributes to inline elements. For instance:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markdown",children:"This is a [highlighted text]{.highlight} within a sentence.\n"})}),"\n",(0,s.jsx)(n.p,{children:"Results in:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<p>This is a <span class="highlight">highlighted text</span> within a sentence.</p>\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"5-generic-attributes",children:"5. Generic Attributes"}),"\n",(0,s.jsx)(n.p,{children:"Generic attributes work on block-level elements like headings or paragraphs. For example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markdown",children:"# A Titled Section {.section-title}\n\nSome paragraph text with a generic attribute.\n"})}),"\n",(0,s.jsx)(n.p,{children:"Converts to:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<h1 class="section-title">A Titled Section</h1>\n<p>Some paragraph text with a generic attribute.</p>\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"6-raw-attributes",children:"6. Raw Attributes"}),"\n",(0,s.jsx)(n.p,{children:"Raw HTML in your Markdown is passed through as-is, including its attributes. For example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markdown",children:'<div data-info="raw" style="color: red;">\n  This is a raw HTML block with attributes.\n</div>\n'})}),"\n",(0,s.jsx)(n.p,{children:"Pandoc leaves it untouched:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<div data-info="raw" style="color: red;">\n  This is a raw HTML block with attributes.\n</div>\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"7-designating-specific-html-tags",children:"7. Designating Specific HTML Tags"}),"\n",(0,s.jsxs)(n.p,{children:["Pandoc\u2019s Divs (and inline spans) let you specify a custom HTML tag by using the ",(0,s.jsx)(n.code,{children:"tag"})," attribute."]}),"\n",(0,s.jsx)(n.h3,{id:"section",children:"Section"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markdown",children:"::: {tag=section #sec1 .intro}\nThis content is inside a <code>section</code> element.\n:::\n"})}),"\n",(0,s.jsx)(n.p,{children:"Becomes:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<section id="sec1" class="intro">\n  <p>This content is inside a <code>section</code> element.</p>\n</section>\n'})}),"\n",(0,s.jsx)(n.h3,{id:"article",children:"Article"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markdown",children:"::: {tag=article #article1 .post}\nContent inside an <code>article</code> element.\n:::\n"})}),"\n",(0,s.jsx)(n.p,{children:"Converts to:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<article id="article1" class="post">\n  <p>Content inside an <code>article</code> element.</p>\n</article>\n'})}),"\n",(0,s.jsx)(n.h3,{id:"footer",children:"Footer"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markdown",children:"::: {tag=footer #footer1}\nFooter content goes here.\n:::\n"})}),"\n",(0,s.jsx)(n.p,{children:"Becomes:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<footer id="footer1">\n  <p>Footer content goes here.</p>\n</footer>\n'})}),"\n",(0,s.jsx)(n.h3,{id:"div",children:"Div"}),"\n",(0,s.jsxs)(n.p,{children:["A standard Div (without overriding the tag) remains a ",(0,s.jsx)(n.code,{children:"<div>"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markdown",children:"::: {#div1 .container}\nContent inside a div.\n:::\n"})}),"\n",(0,s.jsx)(n.p,{children:"Converts to:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<div id="div1" class="container">\n  <p>Content inside a div.</p>\n</div>\n'})}),"\n",(0,s.jsx)(n.h3,{id:"span",children:"Span"}),"\n",(0,s.jsxs)(n.p,{children:["Bracketed spans by default yield ",(0,s.jsx)(n.code,{children:"<span>"})," elements. For example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markdown",children:"Here is an [inline span]{#span1 .highlight} in a sentence.\n"})}),"\n",(0,s.jsx)(n.p,{children:"Results in:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<p>Here is an <span id="span1" class="highlight">inline span</span> in a sentence.</p>\n'})}),"\n",(0,s.jsx)(n.h3,{id:"pre-and-code",children:"Pre and Code"}),"\n",(0,s.jsxs)(n.p,{children:["Fenced code blocks (as shown earlier) automatically produce ",(0,s.jsx)(n.code,{children:"<pre>"})," and ",(0,s.jsx)(n.code,{children:"<code>"})," blocks."]}),"\n",(0,s.jsx)(n.h3,{id:"line-break-br",children:"Line Break (br)"}),"\n",(0,s.jsx)(n.p,{children:"A hard line break can be made by ending a line with two spaces:"}),"\n",(0,s.jsx)(n.p,{children:"First line with a hard break.  -- Two Spaces"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markdown",children:"Second line continues.\n"})}),"\n",(0,s.jsx)(n.p,{children:"This converts to:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:"<p>First line with a hard break.<br />\nSecond line continues.</p>\n"})}),"\n",(0,s.jsx)(n.h3,{id:"horizontal-rule-hr",children:"Horizontal Rule (hr)"}),"\n",(0,s.jsx)(n.p,{children:"A horizontal rule is simply three or more hyphens:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markdown",children:"---\n"})}),"\n",(0,s.jsx)(n.p,{children:"Which becomes:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:"<hr />\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>l});var a=i(6540);const s={},t=a.createContext(s);function r(e){const n=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);